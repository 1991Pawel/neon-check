// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}





model User {
  id                 String    @id @default(cuid())
  email              String?
  passwordHash       String?
  petOwner           PetOwner?
  hotelOwner         HotelOwner?
  senderMessages     Message[] @relation("sender")
  recipientMessages  Message[] @relation("recipient")
}

model PetOwner {
  id          String     @id @default(cuid())
  userId      String     @unique
  name        String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]
  location    Location?  @relation("PetOwnerLocation")
  reviews     Review[]
}

model HotelOwner {
  id          String     @id @default(cuid())
  userId      String     @unique
  name        String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]
  location    Location?  @relation("HotelOwnerLocation")
  reviews     Review[]
}

model Location {
  id            String       @id @default(cuid())
  city          String
  postalCode    String?
  street        String?
  latitude      Float?
  longitude     Float?

  petOwnerId    String?      @unique
  petOwner      PetOwner?    @relation("PetOwnerLocation", fields: [petOwnerId], references: [id], onDelete: Cascade)

  hotelOwnerId  String?      @unique
  hotelOwner    HotelOwner?  @relation("HotelOwnerLocation", fields: [hotelOwnerId], references: [id], onDelete: Cascade)
}

model Photo {
  id            String       @id @default(cuid())
  publicId      String?
  url           String
  isMain        Boolean      @default(false)

  hotelOwnerId  String?
  petOwnerId    String?
  hotelOwner    HotelOwner?  @relation(fields: [hotelOwnerId], references: [id], onDelete: Cascade)
  petOwner      PetOwner?    @relation(fields: [petOwnerId], references: [id], onDelete: Cascade)
}

model Review {
  id           String      @id @default(cuid())
  content      String
  rating       Int
  hotelOwnerId String
  petOwnerId   String

  hotelOwner   HotelOwner  @relation(fields: [hotelOwnerId], references: [id], onDelete: Cascade)
  petOwner     PetOwner    @relation(fields: [petOwnerId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
}

model Message {
  id               String    @id @default(cuid())
  text             String
  created          DateTime  @default(now())
  senderId         String?
  recipientId      String?

  sender           User?     @relation("sender", fields: [senderId], references: [id], onDelete: SetNull)
  recipient        User?     @relation("recipient", fields: [recipientId], references: [id], onDelete: SetNull)

  dateRead         DateTime?
  senderDeleted    Boolean   @default(false)
  recipientDeleted Boolean   @default(false)
}